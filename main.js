(()=>{"use strict";var n={365:(n,t,e)=>{e.d(t,{A:()=>A});var r=e(354),o=e.n(r),i=e(314),a=e.n(i),c=e(417),s=e.n(c),l=new URL(e(324),e.b),u=a()(o()),d=s()(l);u.push([n.id,`@font-face {\n    font-family: "RubikMono";\n    src: url(${d});\n}\n\n* {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n}\n\nbody {\n    height: 100vh;\n    background-color:darkslategray;\n}\n\n.header {\n    font-size: 40px;\n    text-align: center;\n    padding: 20px 20px;\n    color: white;\n    font-family: "RubikMono", sans-serif;\n}\n\n.main {\n    padding: 100px 0 50px 0;\n    display: flex;\n    justify-content:space-evenly;\n}\n\n.info {\n    font-family: "RubikMono", sans-serif;\n    height: 200px;\n    font-size: 20px;\n    text-align: center;\n    color: white;\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n}\n\n.boardContainer {\n    height:fit-content;\n    display: grid;\n    grid-template-columns: repeat(var(--boardsize), 50px);\n    grid-template-rows: repeat(var(--boardsize), 50px);\n    background-color: black;\n    gap: 2px;\n    border: 4px solid black;\n}\n\n.grid {\n    background-color: white;\n    font-size: 50px;\n    color: rgba(255, 0, 0, 0.3);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.recent {\n    color: red;\n    font-weight: bold;\n}\n\n.occupied {\n    background-color: cornflowerblue;\n}\n\n.occupied.sunk {\n    background-color: gray;\n}\n\n.gridButton {\n    background-color: white;\n    border: none;\n    width: 100%;\n    height: 100%;\n}\n\n.gridButton:hover {\n    background-color: rgba(255, 0, 0, 0.4);\n}\n\n.gridButton:disabled {\n    background-color: white;\n}\n\n.highlight {\n    border: 4px solid brown;\n}\n\n.btncontainer {\n    display: flex;\n    justify-content: center;\n    gap: 20px;\n}\n\n.info button {\n    font-family: "RubikMono", sans-serif;\n    width: 200px;\n    padding: 10px 10px;\n    border: none;\n    font-size: 20px;\n    color: darkcyan;\n    border-radius: 5px;\n}\n\n.info button:hover {\n    background-color: rgb(200, 200, 200);\n    color: darkcyan;\n}`,"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,wBAAwB;IACxB,4CAAwC;AAC5C;;AAEA;IACI,sBAAsB;IACtB,UAAU;IACV,SAAS;AACb;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,kBAAkB;IAClB,YAAY;IACZ,oCAAoC;AACxC;;AAEA;IACI,uBAAuB;IACvB,aAAa;IACb,4BAA4B;AAChC;;AAEA;IACI,oCAAoC;IACpC,aAAa;IACb,eAAe;IACf,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,qDAAqD;IACrD,kDAAkD;IAClD,uBAAuB;IACvB,QAAQ;IACR,uBAAuB;AAC3B;;AAEA;IACI,uBAAuB;IACvB,eAAe;IACf,2BAA2B;IAC3B,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,yCAAyC;AAC7C;;AAEA;IACI,UAAU;IACV,iBAAiB;AACrB;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,uBAAuB;IACvB,YAAY;IACZ,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,sCAAsC;AAC1C;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,SAAS;AACb;;AAEA;IACI,oCAAoC;IACpC,YAAY;IACZ,kBAAkB;IAClB,YAAY;IACZ,eAAe;IACf,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,oCAAoC;IACpC,eAAe;AACnB",sourcesContent:['@font-face {\n    font-family: "RubikMono";\n    src: url(fonts/RubikMonoOne-Regular.ttf);\n}\n\n* {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n}\n\nbody {\n    height: 100vh;\n    background-color:darkslategray;\n}\n\n.header {\n    font-size: 40px;\n    text-align: center;\n    padding: 20px 20px;\n    color: white;\n    font-family: "RubikMono", sans-serif;\n}\n\n.main {\n    padding: 100px 0 50px 0;\n    display: flex;\n    justify-content:space-evenly;\n}\n\n.info {\n    font-family: "RubikMono", sans-serif;\n    height: 200px;\n    font-size: 20px;\n    text-align: center;\n    color: white;\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n}\n\n.boardContainer {\n    height:fit-content;\n    display: grid;\n    grid-template-columns: repeat(var(--boardsize), 50px);\n    grid-template-rows: repeat(var(--boardsize), 50px);\n    background-color: black;\n    gap: 2px;\n    border: 4px solid black;\n}\n\n.grid {\n    background-color: white;\n    font-size: 50px;\n    color: rgba(255, 0, 0, 0.3);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.recent {\n    color: red;\n    font-weight: bold;\n}\n\n.occupied {\n    background-color: cornflowerblue;\n}\n\n.occupied.sunk {\n    background-color: gray;\n}\n\n.gridButton {\n    background-color: white;\n    border: none;\n    width: 100%;\n    height: 100%;\n}\n\n.gridButton:hover {\n    background-color: rgba(255, 0, 0, 0.4);\n}\n\n.gridButton:disabled {\n    background-color: white;\n}\n\n.highlight {\n    border: 4px solid brown;\n}\n\n.btncontainer {\n    display: flex;\n    justify-content: center;\n    gap: 20px;\n}\n\n.info button {\n    font-family: "RubikMono", sans-serif;\n    width: 200px;\n    padding: 10px 10px;\n    border: none;\n    font-size: 20px;\n    color: darkcyan;\n    border-radius: 5px;\n}\n\n.info button:hover {\n    background-color: rgb(200, 200, 200);\n    color: darkcyan;\n}'],sourceRoot:""}]);const A=u},314:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var l=0;l<n.length;l++){var u=[].concat(n[l]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),e&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=e):u[2]=e),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},417:n=>{n.exports=function(n,t){return t||(t={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),t.hash&&(n+=t.hash),/["'() \t\n]|(%20)/.test(n)||t.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},354:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},72:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var i={},a=[],c=0;c<n.length;c++){var s=n[c],l=r.base?s[0]+r.base:s[0],u=i[l]||0,d="".concat(l," ").concat(u);i[l]=u+1;var A=e(d),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)t[A].references++,t[A].updater(f);else{var p=o(f,r);r.byIndex=c,t.splice(c,0,{identifier:d,updater:p,references:1})}a.push(d)}return a}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=e(i[a]);t[c].references--}for(var s=r(n,o),l=0;l<i.length;l++){var u=e(i[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=s}}},659:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},540:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},56:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},113:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},324:(n,t,e)=>{n.exports=e.p+"bca8f5015b00e4514972.ttf"}},t={};function e(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return n[r](i,i.exports,e),i.exports}e.m=n,e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var r=t.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&(!n||!/^http(s?):/.test(n));)n=r[o--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.b=document.baseURI||self.location.href,e.nc=void 0;const r=function(n){let t=function(){let t=Array.from(Array(n),(()=>[]));return t.forEach(((t,e)=>{for(let r=0;r<n;r++)t.push({x:e,y:r,ship:null,isHit:!1})})),t}(),e=[],r=0;function o([e,r]){return e>=n||e<0||r>=n||r<0?null:t[e][r]}return{getSize:function(){return n},getGrid:o,placeShip:function(r,[o,i]){let a=[];for(let e=0;e<r.getLength();e++)if(r.isVertical()){if(i+e>=n)throw new Error("Out of Bound");if(null!==t[o][i+e].ship)throw new Error("Grid already occupied");a.push([o,i+e])}else{if(o+e>=n)throw new Error("Out of Bound");if(null!==t[o+e][i].ship)throw new Error("Grid already occupied");a.push([o+e,i])}a.forEach((n=>t[n[0]][n[1]].ship=r)),r.setCoordinates(a),e.push(r)},receiveAttack:function([n,e]){let o=t[n][e];if(o.isHit)throw new Error("Grid already hit");return o.isHit=!0,r++,null!==o.ship&&(o.ship.hit(),!0)},isAllSunk:function(){if(0===e.length)return!0;let n=!0;return e.forEach((t=>{t.isSunk()||(n=!1)})),n},getTotalHit:function(){return r},isAreaClear:function([t,e]){if(null===o([t,e]))return!1;let r=!0;return[[-1,-1],[0,-1],[1,-1],[-1,0],[0,0],[1,0],[-1,1],[0,1],[1,1]].forEach((i=>{const a=t+i[0],c=e+i[1];a<n&&a>=0&&c<n&&c>=0&&null!==o([a,c]).ship&&(r=!1)})),r}}};function o(n,t="Player"){let e=r(n);return{getName:()=>t,getBoard:()=>e,resetBoard:()=>{e=r(n)}}}function i(n){let t=n.getBoard().getSize(),e=function(){let n=[];for(let e=0;e<t;e++)for(let r=0;r<t;r++)n.push([e,r]);return n}(),r=[];return{choose:function(){let n,t=null;if(0===e.length)throw new Error("no possible moves for computer, should not happen before the game is over");if(r.length>0){const o=function(){let n;return 1===r.length&&(n=e.filter((n=>{let t=Math.abs(n[0]-r[0][0]),e=Math.abs(n[1]-r[0][1]);return 1===t&&0===e||1===e&&0===t}))),r.length>1&&(n=r[0][0]===r[1][0]?e.filter((n=>{const t=n[0]===r[0][0],e=n[1]===r[0][1]-1,o=n[1]===r.at(-1)[1]+1;return t&&(e||o)})):e.filter((n=>{const t=n[1]===r[0][1],e=n[0]===r[0][0]-1,o=n[0]===r.at(-1)[0]+1;return t&&(e||o)}))),n}();o.length>0&&(t=o[Math.floor(Math.random()*o.length)],n=e.indexOf(t))}return null===t&&(n=Math.floor(Math.random()*e.length),t=e[n]),e.splice(n,1),t},addRecentHit:function(n){if(0===r.length)r.push(n);else{let t=r.at(-1);n[0]===t[0]?n[1]>t[1]?r.push(n):r.unshift(n):n[0]>t[0]?r.push(n):r.unshift(n)}},clearRecentHit:function(){r=[]},filterSunkShipArea:function(n){const t=n.at(0)[0]-1,r=n.at(-1)[0]+1,o=n.at(0)[1]-1,i=n.at(-1)[1]+1;e=e.filter((n=>!(n[0]>=t&&n[0]<=r&&n[1]>=o&&n[1]<=i)))}}}function a(n,t="Computer"){const e=o(n,t);return{...e,...i(e)}}const c=function(n,t=!1){let e,r=0;return{getLength:function(){return n},hit:function(){r++},isSunk:function(){return r>=n},isVertical:function(){return t},setCoordinates:function(n){e=n},getCoordinates:function(){return e}}},s=function(){const n=document.querySelector(".main"),t=document.querySelector(".log"),e=document.querySelector(".btncontainer");let r,i,s,l,u,d;function A(c,A){r=c,i=A,s=new o(c),p(s,f(A)),u=g(s),n.appendChild(u),l=new a(c),p(l,f(A)),d=g(l),d.querySelectorAll(".grid").forEach(((n,e)=>{const o=e%r,i=Math.floor(e/r),a=document.createElement("button");a.classList.add("gridButton"),n.classList.remove("occupied"),a.addEventListener("click",(()=>{!function(n,e){const r=l.getBoard().receiveAttack(n);if(e.removeChild(e.firstChild),y(e),r){if(t.textContent="Hit! you can attack again",e.classList.add("occupied"),l.getBoard().getGrid(n).ship.isSunk()){const e=l.getBoard().getGrid(n).ship;m(d,e),t.textContent="Ship sunk! you can attack again"}v(l)&&B(s)}else!function(){let n,e;C(s),t.textContent=`${l.getName()} is attacking...`,x(d,!1);const r=setInterval((function(){if(e=l.choose(),n=s.getBoard().receiveAttack(e),n)if(t.textContent=`Hit! ${l.getName()} is making another attack...`,s.getBoard().getGrid(e).ship.isSunk()){const n=s.getBoard().getGrid(e).ship;m(u,n),t.textContent=`Ship sunk! ${l.getName()} is making another attack...`,l.filterSunkShipArea(n.getCoordinates()),l.clearRecentHit()}else l.addRecentHit(e);y(I(u,e)),n||(x(d,!0),clearInterval(r),C(l),t.textContent="Your move"),v(s)&&(B(l),clearInterval(r))}),1e3)}()}([o,i],n)})),n.appendChild(a)})),n.appendChild(d),x(d,!1),t.textContent="Click RANDOMIZE to reshuffle your ships or START to begin.";const h=document.createElement("button");h.textContent="RANDOMIZE",h.addEventListener("click",(()=>{n.removeChild(u),p(s,f(A)),u=g(s),n.insertBefore(u,d)}));const k=document.createElement("button");k.textContent="START",k.addEventListener("click",b),e.appendChild(h),e.appendChild(k)}function f(n){const t=[];return n.forEach((n=>{Math.random()>.5?t.push(c(n)):t.push(c(n,!0))})),t}function p(n,t){let e=!0,r=0;do{if(n.resetBoard(),t.forEach((t=>{h(t,n)||(e=!1)})),r++,r>100)throw new Error("Struggles to randomize ships, reduce it number or increase board size")}while(!e)}function h(n,t){let e,o,i=0,a=t.getBoard(),c=!1;for(;i<100;){e=Math.floor(Math.random()*r),o=Math.floor(Math.random()*r);const t=[];for(let r=0;r<n.getLength();r++)n.isVertical()?t.push([e,o+r]):t.push([e+r,o]);let s=!0;if(t.forEach((n=>{a.isAreaClear(n)||(s=!1)})),s){a.placeShip(n,[e,o]),c=!0;break}i++}return c}function g(n){const t=document.createElement("div");t.classList.add("boardContainer"),t.style.cssText=`--boardsize: ${r}`;for(let e=0;e<r*r;e++){const o=document.createElement("div"),i=e%r,a=Math.floor(e/r);o.classList.add("grid"),null!==n.getBoard().getGrid([i,a]).ship&&o.classList.add("occupied"),t.appendChild(o)}return t}function C(n){n===l&&(d.classList.add("highlight"),u.classList.remove("highlight")),n===s&&(d.classList.remove("highlight"),u.classList.add("highlight"))}function b(){for(;e.firstChild;)e.removeChild(e.firstChild);x(d,!0),C(l),t.textContent="Your move"}function m(n,t){t.getCoordinates().forEach((t=>{I(n,t).classList.add("sunk")}))}function v(n){return n.getBoard().isAllSunk()}function B(o){x(d,!1),t.textContent=o.getName()+" wins!";const a=document.createElement("button");a.textContent="RESTART",a.addEventListener("click",(()=>{for(t.textContent="RESTARTING...";n.firstChild;)n.removeChild(n.firstChild);for(t.textContent="";e.firstChild;)e.removeChild(e.firstChild);A(r,i)})),e.appendChild(a)}function x(n,t){n.querySelectorAll("button").forEach((n=>{t?n.removeAttribute("disabled"):n.setAttribute("disabled","")}))}function y(n){document.querySelectorAll(".grid").forEach((n=>{n.classList.remove("recent")})),n.textContent="X",n.classList.add("recent")}function I(n,t){const e=n.querySelectorAll(".grid"),o=t[1]*r+t[0];return e.item(o)}return{setUpNewGame:A}}();var l=e(72),u=e.n(l),d=e(825),A=e.n(d),f=e(659),p=e.n(f),h=e(56),g=e.n(h),C=e(540),b=e.n(C),m=e(113),v=e.n(m),B=e(365),x={};x.styleTagTransform=v(),x.setAttributes=g(),x.insert=p().bind(null,"head"),x.domAPI=A(),x.insertStyleElement=b(),u()(B.A,x),B.A&&B.A.locals&&B.A.locals,s.setUpNewGame(8,[3,3,2,2,1,1])})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,